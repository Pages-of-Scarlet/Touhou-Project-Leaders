#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = FROM.OWNER
	NOT = {
		any_controlled_ship = {
			is_ship_size = colossus
		}
	}
	OR = {
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_communications = FROM.OWNER }
			}
			FROM.OWNER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			ROOT.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			FROM.OWNER = { is_country_type = primitive }
		}
		ROOT.CONTROLLER = { is_at_war_with = FROM.CONTROLLER }
		FROM = { is_planet_class = pc_infested }
		FROM.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					ROOT.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		ROOT.CONTROLLER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = debt_collectors
				is_country_type = gray_goo
				is_country_type = vol
				is_country_type = koishi_berserk_fleet
				AND = {
					is_country_type = awakened_marauders
					FROM.CONTROLLER = { is_hostile = prev }
				}
			}
		}
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = ROOT.CONTROLLER }
			}
			from.owner = {
				is_same_value = ROOT.CONTROLLER
			}
		}
	}
}

system_blocks_sensors = {
	OR = {
		is_inside_nebula = yes
		has_modifier = space_storm
		has_modifier = zroni_storm
		has_modifier = queen_scorn_storm
		has_modifier = tengu_storm
		has_modifier = bat_swarm
		has_modifier = red_fog
		has_star_flag = lcluster
		has_star_flag = sealed_system
	}
}
# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOR = {
		has_trait = trait_exd
		has_trait = trait_sanae_robot_worker
	}
	NOT = {
		AND = {
			has_trait = trait_mechanical
			root.owner = { is_individual_machine = yes }
		}
	}
	NOT = {
		AND = {
			has_virtual_species_trait = yes
			root.owner = {
				is_fallen_empire = no
				has_active_tradition = tr_virtuality_finish
			}
		}
	}
	OR = {
		AND = {
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				owner = {
					NOT = { has_country_flag = synth_assembly_stopped }
				}
			}
			OR = {
				NOT = {
					has_trait = trait_thl_doll
					dolls_assembly_trigger = yes
				}
			}
		}
		AND = {
			is_organic_species = yes
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				has_trait = trait_hive_mind
			}
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					has_building = building_clone_army_clone_vat
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			else = {
				root = {
					OR = {
						has_building = building_clone_vats
						has_building = building_corpses_disposal_center
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						AND = {
							OR = {
								has_building = building_galactic_memorial_1
								has_building = building_galactic_memorial_2
								has_building = building_galactic_memorial_3
							}
							owner = { has_civic = civic_nether_world }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
}

###人偶
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
			# Rule out Traits for servitude & lack of free will
			NOR = {
				has_trait = trait_syncretic_proles
				has_trait = trait_zombie
				has_trait = trait_nerve_stapled
			}
			# Rule out Machine Pops, unless they're rendered sapient
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					NOT = { has_trait = trait_thl_doll }
					owner = { has_technology = tech_synthetic_workers }
					owner = { has_policy_flag = ai_full_rights }
				}
				AND = {
					has_trait = trait_thl_doll
					owner = { has_technology = tech_doll_leaders }
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			# Rule out Organic Trophies
			NOT = {
				has_citizenship_type = {
					type = citizenship_organic_trophy
					country = owner
				}
			}
			# Rule out violations of the 'Right to Work' Resolution (prioritises organic workers)
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

species_has_happiness = {
	NOR = {
		has_trait = trait_hive_mind
		can_think = no
		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = { has_authority = auth_machine_intelligence }
				AND = {
					NOT = { has_trait = trait_thl_doll }
					from = {
						NOT = { has_technology = tech_synthetic_workers }
					}
				}
				AND = {
					has_trait = trait_thl_doll
					from = {
						NOT = { has_technology = tech_sapient_dolls }
					}
				}
				from = { has_policy_flag = ai_outlawed }
			}
		}
		AND = {
			has_trait = trait_cybernetic
			exists = from
			from = {
				has_authority = auth_machine_intelligence
				has_civic = civic_machine_assimilator # Assimilator empire
			}
		}
		AND = {
			has_trait = trait_machine_unit
			exists = from
			from = {
				has_authority = auth_machine_intelligence
			}
		}
	}
}

species_can_live_on_planet = {
	exists = root #somehow this appeared in the error log. No idea how!
	NAND = {
		root = { is_planet_class = pc_machine }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					has_authority = auth_machine_intelligence
					has_civic = civic_machine_assimilator # Assimilator empire
				}
			}
		}
	}
	if = {
		limit = {
			root = { is_planet_class = pc_hive }
		}
		OR = {
			has_trait = trait_hive_mind
			AND = { #Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					is_hive_empire = yes
					has_origin = origin_necrophage
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	}
	###净土
	if = {
		limit = {
			root = { is_planet_class = pc_nether }
		}
		OR = {
			has_trait = trait_thl_spirit
			AND = { #Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					owner_main_species = {
						has_trait = trait_thl_spirit
					}
					has_origin = origin_necrophage
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	}
}

should_count_towards_leader_cap = {
	NOR = {
		leader_class = envoy
		AND = {
			owner = { is_gestalt = yes }
			is_councilor = yes
			# We count all rulers as well
			NOT = { is_ruler = yes }
		}
		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader
		has_leader_flag = legendary_leader
		has_touhou_leader_trait = yes
		AND = {
			has_trait_tier1or2 = { TRAIT = leader_trait_eager }
			has_skill < 4
		}
	}
}

can_terraform_planet = {
	custom_tooltip = {
		fail_text = terraform_fail_no_presapient_protection_or_no_presapients
		NAND = {
			AND = {
				exists = root
				root = { has_policy_flag = pre_sapients_protect }
			}
			any_owned_species = { is_sapient = no }
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_devouring_swarm_lithoid"
		exists = root
		root = { is_lithoid_devouring_swarm = no }
	}
	custom_tooltip = {
		fail_text = "legendary_leader_planet_no_terraform"
		exists = root
		this = {
			NOT = { has_planet_flag = legendary_leader_planet }
		}
	}
	custom_tooltip = {
		fail_text = "sakura_planet_no_terraform"
		exists = root
		this = {
			NOT = { has_planet_flag = sakura_planet }
		}
	}
	custom_tooltip = {
		fail_text = requires_not_relentless_industrialists_situation
		NOT = {
			any_targeting_situation = {
				is_situation_type = relentless_industrialists_situation
			}
		}
	}
}

###烧尸体发电
should_force_decline_species = {
	OR = {
		# Infertile Clone Army pops should decline if in Country that can't have Vats, or there is a Vat shortage.
		custom_tooltip = {
			success_text = CLONE_ARMY_FORCE_DECLINE
			exists = this
			OR = {
				has_trait = trait_clone_soldier_infertile
				has_trait = trait_clone_soldier_infertile_full_potential
			}
			from = {
				OR = {
					# Check if country is unable to build Vats for this species.
					AND = {
						exists = owner
						owner = {
							OR = {
								NOR = {
									has_origin = origin_clone_army
									has_origin = origin_clone_guard ###兼容星海帝皇
								}
								has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
								NOT = { owner_main_species = { is_same_species = root } }	# Our Vats can't build this species.
							}
						}
					}
					# Vats check out, but are there more pops than Vats support?
					check_variable = { which = clone_pops_missing value < 0 }
				}
			}
		}
		# This slowly kills off the Syntheic Fertility Species
		custom_tooltip = {
			success_text = PATHOGENIC_GENES_FORCE_DECLINE
			exists = this
			has_trait = trait_pathogenic_genes
		}
		custom_tooltip = {
			success_text = KILL_CORPSE_BATTERY
			has_trait = trait_zombie
			from = {
				any_owned_pop = {
					is_same_species = root
					has_job = corpse_battery
				}
			}
		}
	}
}